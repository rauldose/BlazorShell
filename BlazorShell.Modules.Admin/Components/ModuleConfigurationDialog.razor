@using BlazorShell.Core.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Configure @Module?.DisplayName</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Module != null)
                {
                    <EditForm Model="ConfigurationData" OnValidSubmit="SaveConfiguration">
                        <div class="mb-3">
                            <label class="form-label">Module Name</label>
                            <input type="text" class="form-control" value="@Module.DisplayName" readonly />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Version</label>
                            <input type="text" class="form-control" value="@Module.Version" readonly />
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Configuration (JSON)</label>
                            <textarea class="form-control" rows="10" @bind="ConfigurationJson" 
                                      placeholder="Enter module configuration in JSON format"></textarea>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger">
                                @ErrorMessage
                            </div>
                        }
                        
                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@IsSaving">
                                @if (IsSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Save Configuration
                            </button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {
    [Parameter] public ModuleInfo? Module { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Dictionary<string, object>> OnSave { get; set; }

    private Dictionary<string, object> ConfigurationData { get; set; } = new();
    private string ConfigurationJson { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool IsSaving { get; set; }

    protected override void OnParametersSet()
    {
        // Initialize with empty configuration since ModuleInfo doesn't include configuration
        ConfigurationData = new Dictionary<string, object>();
        ConfigurationJson = "{}";
    }

    private async Task SaveConfiguration()
    {
        IsSaving = true;
        ErrorMessage = string.Empty;

        try
        {
            // Validate and parse JSON
            var parsedConfig = JsonSerializer.Deserialize<Dictionary<string, object>>(ConfigurationJson);
            if (parsedConfig != null)
            {
                await OnSave.InvokeAsync(parsedConfig);
            }
        }
        catch (JsonException ex)
        {
            ErrorMessage = $"Invalid JSON format: {ex.Message}";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error saving configuration: {ex.Message}";
        }
        finally
        {
            IsSaving = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}