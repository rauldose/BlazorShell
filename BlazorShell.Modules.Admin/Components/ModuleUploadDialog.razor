@using Microsoft.AspNetCore.Components.Forms
@using BlazorShell.Modules.Admin.Services

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Module</h5>
                <button type="button" class="btn-close" @onclick="Close" disabled="@IsUploading"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="this" OnValidSubmit="HandleUpload">
                    <div class="mb-3">
                        <label class="form-label">Select Module File (.dll or .zip)</label>
                        <InputFile OnChange="OnFileSelected" class="form-control" accept=".dll,.zip" disabled="@IsUploading" />
                        @if (!string.IsNullOrEmpty(ValidationMessage))
                        {
                            <div class="form-text text-danger">@ValidationMessage</div>
                        }
                    </div>

                    @if (IsUploading)
                    {
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <span>Uploading...</span>
                                <span>@UploadProgress%</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: @(UploadProgress)%" 
                                     aria-valuenow="@UploadProgress" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(Message))
                    {
                        <div class="alert @(IsSuccess ? "alert-success" : "alert-danger")">
                            @Message
                        </div>
                    }

                    <div class="d-flex justify-content-end gap-2">
                        <button type="button" class="btn btn-secondary" @onclick="Close" disabled="@IsUploading">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@(SelectedFile == null || IsUploading)">
                            @if (IsUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Upload Module
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<string> OnUploadComplete { get; set; }
    [Inject] private IModuleUploadService UploadService { get; set; } = default!;

    private IBrowserFile? SelectedFile;
    private bool IsUploading;
    private int UploadProgress;
    private string ValidationMessage = string.Empty;
    private string Message = string.Empty;
    private bool IsSuccess;

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        ValidationMessage = string.Empty;
        Message = string.Empty;

        if (SelectedFile != null)
        {
            if (!UploadService.ValidateModuleFile(SelectedFile))
            {
                ValidationMessage = "Invalid file. Please select a .dll or .zip file under 50MB.";
                SelectedFile = null;
            }
        }

        StateHasChanged();
    }

    private async Task HandleUpload()
    {
        if (SelectedFile == null) return;

        IsUploading = true;
        UploadProgress = 0;
        Message = string.Empty;
        StateHasChanged();

        try
        {
            var progress = new Progress<int>(percentage =>
            {
                UploadProgress = percentage;
                InvokeAsync(() => StateHasChanged());
            });

            var result = await UploadService.UploadModuleAsync(SelectedFile, progress);

            Message = result.Message;
            IsSuccess = result.Success;

            if (result.Success && !string.IsNullOrEmpty(result.ModuleName))
            {
                await Task.Delay(2000); // Show success message briefly
                await OnUploadComplete.InvokeAsync(result.ModuleName);
            }
        }
        catch (Exception ex)
        {
            Message = $"Upload failed: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsUploading = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        if (!IsUploading)
        {
            await OnClose.InvokeAsync();
        }
    }
}