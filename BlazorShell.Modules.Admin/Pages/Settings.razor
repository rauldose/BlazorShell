@* BlazorShell.Modules.Admin/Pages/Settings.razor *@
@page "/admin/settings"
@using BlazorShell.Core.Components
@using BlazorShell.Core.Entities
@using BlazorShell.Infrastructure.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@inherits ModuleComponentBase
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>System Settings</PageTitle>

<div class="container-fluid">
    <h1><i class="bi bi-sliders"></i> System Settings</h1>

    <div class="row mt-4">
        <div class="col-md-3">
            <div class="list-group">
                <button class="list-group-item list-group-item-action @(_selectedCategory == "General" ? "active" : "")"
                        @onclick='() => SelectCategory("General")'>
                    <i class="bi bi-gear"></i> General
                </button>
                <button class="list-group-item list-group-item-action @(_selectedCategory == "Security" ? "active" : "")"
                        @onclick='() => SelectCategory("Security")'>
                    <i class="bi bi-shield"></i> Security
                </button>
                <button class="list-group-item list-group-item-action @(_selectedCategory == "Email" ? "active" : "")"
                        @onclick='() => SelectCategory("Email")'>
                    <i class="bi bi-envelope"></i> Email
                </button>
                <button class="list-group-item list-group-item-action @(_selectedCategory == "Modules" ? "active" : "")"
                        @onclick='() => SelectCategory("Modules")'>
                    <i class="bi bi-puzzle"></i> Modules
                </button>
                <button class="list-group-item list-group-item-action @(_selectedCategory == "Performance" ? "active" : "")"
                        @onclick='() => SelectCategory("Performance")'>
                    <i class="bi bi-speedometer"></i> Performance
                </button>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5>@_selectedCategory Settings</h5>
                </div>
                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status"></div>
                            <p class="mt-2">Loading settings...</p>
                        </div>
                    }
                    else if (_categorySettings != null)
                    {
                        <form>
                            @foreach (var setting in _categorySettings)
                            {
                                <div class="mb-3">
                                    <label class="form-label">
                                        @setting.Key
                                        @if (!string.IsNullOrEmpty(setting.Description))
                                        {
                                            <i class="bi bi-info-circle text-muted" title="@setting.Description"></i>
                                        }
                                    </label>
                                    @if (setting.DataType == "Boolean")
                                    {
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input"
                                            checked="@(setting.Value == "true")"
                                            @onchange="(e) => UpdateSetting(setting, ((bool?)e.Value ?? false).ToString())">
                                        </div>
                                    }
                                    else if (setting.DataType == "Integer")
                                    {
                                        <input type="number" class="form-control"
                                        value="@setting.Value"
                                        @onchange="(e) => UpdateSetting(setting, e.Value?.ToString())">
                                    }
                                    else if (setting.DataType == "Password" || setting.IsEncrypted)
                                    {
                                        <input type="password" class="form-control"
                                        value="@setting.Value"
                                        @onchange="(e) => UpdateSetting(setting, e.Value?.ToString())">
                                    }
                                    else
                                    {
                                        <input type="text" class="form-control"
                                        value="@setting.Value"
                                        @onchange="(e) => UpdateSetting(setting, e.Value?.ToString())">
                                    }
                                </div>
                            }

                            <button type="button" class="btn btn-primary" @onclick="SaveSettings">
                                <i class="bi bi-save"></i> Save Settings
                            </button>
                        </form>
                    }
                    else
                    {
                        <p>No settings available for this category.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (_message != null)
{
    <div class="alert @(_isError ? "alert-danger" : "alert-success") alert-dismissible fade show position-fixed bottom-0 end-0 m-3" style="z-index: 1050;">
        @_message
        <button type="button" class="btn-close" @onclick="() => _message = null"></button>
    </div>
}

@code {
    [Inject] private ApplicationDbContext DbContext { get; set; } = null!;

    private string _selectedCategory = "General";
    private List<Setting>? _categorySettings;
    private bool _isLoading = false;
    private string? _message;
    private bool _isError = false;

    protected override async Task OnModuleInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        _isLoading = true;
        try
        {
            _categorySettings = await DbContext.Settings
                .Where(s => s.Category == _selectedCategory)
                .OrderBy(s => s.Key)
                .ToListAsync();

            // If no settings exist for this category, create default ones
            if (!_categorySettings.Any())
            {
                _categorySettings = GetDefaultSettings(_selectedCategory);
                DbContext.Settings.AddRange(_categorySettings);
                await DbContext.SaveChangesAsync();
            }
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectCategory(string category)
    {
        _selectedCategory = category;
        InvokeAsync(LoadSettings);
    }

    private void UpdateSetting(Setting setting, string? newValue)
    {
        if (setting != null && newValue != null)
        {
            setting.Value = newValue;
            setting.ModifiedDate = DateTime.UtcNow;
            setting.ModifiedBy = User?.Identity?.Name ?? "System";
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            await DbContext.SaveChangesAsync();
            ShowMessage("Settings saved successfully", false);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving settings: {ex.Message}", true);
        }
    }

    private List<Setting> GetDefaultSettings(string category)
    {
        var settings = new List<Setting>();
        var now = DateTime.UtcNow;

        switch (category)
        {
            case "General":
                settings.Add(new Setting { Category = category, Key = "ApplicationName", Value = "BlazorShell", DataType = "String", Description = "Application display name", IsPublic = true, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "DefaultTimeZone", Value = "UTC", DataType = "String", Description = "Default timezone for the application", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "MaintenanceMode", Value = "false", DataType = "Boolean", Description = "Enable maintenance mode", IsPublic = false, ModifiedDate = now });
                break;

            case "Security":
                settings.Add(new Setting { Category = category, Key = "RequireEmailConfirmation", Value = "false", DataType = "Boolean", Description = "Require email confirmation for new users", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "PasswordExpirationDays", Value = "90", DataType = "Integer", Description = "Days before password expires", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "MaxLoginAttempts", Value = "5", DataType = "Integer", Description = "Maximum failed login attempts", IsPublic = false, ModifiedDate = now });
                break;

            case "Email":
                settings.Add(new Setting { Category = category, Key = "SmtpHost", Value = "localhost", DataType = "String", Description = "SMTP server host", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "SmtpPort", Value = "587", DataType = "Integer", Description = "SMTP server port", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "SmtpUser", Value = "", DataType = "String", Description = "SMTP username", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "SmtpPassword", Value = "", DataType = "Password", Description = "SMTP password", IsPublic = false, IsEncrypted = true, ModifiedDate = now });
                break;

            case "Modules":
                settings.Add(new Setting { Category = category, Key = "EnableDynamicLoading", Value = "true", DataType = "Boolean", Description = "Allow dynamic module loading", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "ModuleUploadMaxSizeMB", Value = "10", DataType = "Integer", Description = "Maximum module upload size in MB", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "AutoLoadModules", Value = "true", DataType = "Boolean", Description = "Auto-load modules on startup", IsPublic = false, ModifiedDate = now });
                break;

            case "Performance":
                settings.Add(new Setting { Category = category, Key = "EnableCaching", Value = "true", DataType = "Boolean", Description = "Enable application caching", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "CacheExpirationMinutes", Value = "60", DataType = "Integer", Description = "Cache expiration in minutes", IsPublic = false, ModifiedDate = now });
                settings.Add(new Setting { Category = category, Key = "EnableCompression", Value = "true", DataType = "Boolean", Description = "Enable response compression", IsPublic = false, ModifiedDate = now });
                break;
        }

        return settings;
    }

    private void ShowMessage(string message, bool isError)
    {
        _message = message;
        _isError = isError;

        Task.Delay(5000).ContinueWith(_ =>
        {
            _message = null;
            InvokeAsync(StateHasChanged);
        });
    }
}