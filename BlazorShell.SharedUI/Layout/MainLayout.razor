@using BlazorShell.Application.Interfaces
@using BlazorShell.Domain.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inherits LayoutComponentBase
@implements IDisposable
@inject INavigationService NavigationService
@inject IModuleRegistry ModuleRegistry
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="dashboard-layout">
    <!-- Top Information Bar -->
    <header class="info-bar">
        <div class="info-left">
            <i class="bi bi-grid-3x3-gap-fill"></i>
            <span class="brand-text">Dashboard</span>
        </div>
        <div class="info-center">
            <span>@DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss")</span>
        </div>
        <div class="info-right">
            <AuthorizeView>
                <Authorized>
                    <span class="user-info">
                        <i class="bi bi-person-circle"></i>
                        @context.User.Identity?.Name
                    </span>
                </Authorized>
                <NotAuthorized>
                    <a href="/Account/Login" class="login-link">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </header>

    <!-- Notifications Dropdown Panel -->
    @if (_showNotifications)
    {
        <div class="notifications-dropdown">
            <div class="notifications-header">
                <h3>Notifications</h3>
                <button class="close-btn" @onclick="ToggleNotifications">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="notifications-content">
                @if (_notificationCount > 0)
                {
                    <div class="notification-item">
                        <i class="bi bi-info-circle text-info"></i>
                        <div class="notification-body">
                            <div class="notification-title">System Update</div>
                            <div class="notification-text">New module available</div>
                            <div class="notification-time">5 minutes ago</div>
                        </div>
                    </div>
                    <div class="notification-item">
                        <i class="bi bi-check-circle text-success"></i>
                        <div class="notification-body">
                            <div class="notification-title">Task Completed</div>
                            <div class="notification-text">Deployment successful</div>
                            <div class="notification-time">1 hour ago</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-notifications">
                        <i class="bi bi-bell"></i>
                        <p>No new notifications</p>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Alerts Bar (if active) -->
    @if (_hasAlerts)
    {
        <div class="alerts-bar">
            <i class="bi bi-exclamation-triangle"></i>
            <span>@_alertCount active alerts</span>
            <button class="alert-dismiss" @onclick="DismissAlerts">×</button>
        </div>
    }

    <!-- Main Grid Layout -->
    <div class="dashboard-grid">
        <!-- Left Navigation Area -->
        <aside class="nav-sidebar @(_sidebarCollapsed ? "collapsed" : "")">
            <div class="nav-header">
                @if (!_sidebarCollapsed)
                {
                    <span class="nav-title">NAVIGATION</span>
                }
                <button class="collapse-btn" @onclick="ToggleSidebar">
                    <i class="bi @(_sidebarCollapsed ? "bi-chevron-right" : "bi-chevron-left")"></i>
                </button>
            </div>
            <nav class="nav-menu">
                @if (_sideMenuItems != null)
                {
                    @foreach (var item in _sideMenuItems)
                    {
                        @if (item.Children?.Any() == true)
                        {
                            <!-- Parent item with children -->
                            <div class="nav-group">
                                <button class="nav-parent @(IsChildActive(item) ? "active" : "") @(_expandedGroups.Contains(item.Name) ? "expanded" : "")"
                                        @onclick="() => ToggleNavGroup(item.Name)"
                                        title="@item.DisplayName">
                                    <i class="@item.Icon"></i>
                                    @if (!_sidebarCollapsed)
                                    {
                                        <span class="nav-text">@item.DisplayName</span>
                                        <i class="bi bi-chevron-down nav-chevron"></i>
                                    }
                                </button>
                                @if (_expandedGroups.Contains(item.Name) && !_sidebarCollapsed)
                                {
                                    <div class="nav-children">
                                        @foreach (var child in item.Children)
                                        {
                                            <a href="@child.Url" class="nav-child @(IsActive(child.Url) ? "active" : "")">
                                                <i class="@child.Icon"></i>
                                                <span class="nav-text">@child.DisplayName</span>
                                            </a>
                                        }
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <!-- Single item without children -->
                            <a href="@item.Url" class="nav-item @(IsActive(item.Url) ? "active" : "")" title="@item.DisplayName">
                                <i class="@item.Icon"></i>
                                @if (!_sidebarCollapsed)
                                {
                                    <span class="nav-text">@item.DisplayName</span>
                                }
                            </a>
                        }
                    }
                }
            </nav>
        </aside>

        <!-- Main Content Area -->
        <main class="content-area">
            @Body
        </main>

        <!-- Right Actions Bar -->
        <aside class="actions-bar">
          @*   <button class="action-btn" title="Dashboard" @onclick="() => NavigateTo('/')">
                <i class="bi bi-house-door"></i>
            </button>

            <button class="action-btn" title="Analytics" @onclick="() => NavigateTo('/analytics')">
                <i class="bi bi-graph-up"></i>
            </button>

            <button class="action-btn" title="Reports" @onclick="() => NavigateTo('/reports')">
                <i class="bi bi-file-text"></i>
            </button>

            <button class="action-btn" title="Settings" @onclick="() => NavigateTo('/settings')">
                <i class="bi bi-gear"></i>
            </button> *@

            <button class="action-btn" title="Notifications" @onclick="ToggleNotifications">
                <i class="bi bi-bell"></i>
                @if (_notificationCount > 0)
                {
                    <span class="badge">@_notificationCount</span>
                }
            </button>

            <div class="action-spacer"></div>

            <AuthorizeView>
                <Authorized>
                    <form action="/Account/Logout" method="post">
                        <AntiforgeryToken />
                        <button type="submit" class="action-btn logout" title="Logout">
                            <i class="bi bi-box-arrow-right"></i>
                        </button>
                    </form>
                </Authorized>
            </AuthorizeView>
        </aside>
    </div>

    <!-- Bottom Functions Bar -->
    <footer class="functions-bar">
        <div class="functions-content">
            @if (_topMenuItems != null)
            {
                @foreach (var item in _topMenuItems.Take(10))
                {
                    <button class="func-btn" @onclick="() => NavigateTo(item.Url)">
                        <i class="@item.Icon"></i>
                        <span>@item.DisplayName</span>
                    </button>
                }
            }
        </div>
    </footer>
</div>

@if (_showNotifications)
{
    <div class="overlay" @onclick="ToggleNotifications"></div>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private List<NavigationItem>? _sideMenuItems;
    private List<NavigationItem>? _topMenuItems;
    private HashSet<string> _expandedGroups = new HashSet<string>();
    private string? _currentUrl;
    private bool _hasAlerts = false;
    private int _alertCount = 3;
    private int _notificationCount = 2;
    private bool _sidebarCollapsed = false;
    private bool _showNotifications = false;

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = Navigation.Uri;
        Navigation.LocationChanged += OnLocationChanged;

        if (NavigationService != null)
        {
            NavigationService.NavigationChanged += OnNavigationChanged;
        }

        await LoadNavigationItems();
    }


    private async Task LoadNavigationItems()
    {
        if (NavigationService == null) return;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                _topMenuItems = (await NavigationService.GetUserNavigationItemsAsync(userId, NavigationType.TopMenu)).ToList();
                _sideMenuItems = (await NavigationService.GetUserNavigationItemsAsync(userId, NavigationType.SideMenu)).ToList();
            }
        }
        else
        {
            // For anonymous users, only show public items
            _topMenuItems = (await NavigationService.GetNavigationItemsAsync(NavigationType.TopMenu))
                .Where(n => n.IsPublic)
                .ToList();

            _sideMenuItems = (await NavigationService.GetNavigationItemsAsync(NavigationType.SideMenu))
                .Where(n => n.IsPublic)
                .ToList();
        }

        // Auto-expand active groups
        foreach (var item in _sideMenuItems ?? new List<NavigationItem>())
        {
            if (item.Children?.Any() == true && IsActiveGroup(item))
            {
                _expandedGroups.Add(item.Name!);
            }
        }
    }

    private bool IsActiveGroup(NavigationItem group)
    {
        if (group.Children == null || !group.Children.Any())
            return false;

        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);

        // Check if any child item's URL matches the current path
        return group.Children.Any(child =>
            !string.IsNullOrEmpty(child.Url) &&
            currentPath.StartsWith(child.Url.TrimStart('/'), StringComparison.OrdinalIgnoreCase));
    }

    private bool IsActive(NavigationItem item)
    {
        if (string.IsNullOrEmpty(item.Url))
            return false;

        var currentPath = Navigation.ToBaseRelativePath(Navigation.Uri);
        var itemPath = item.Url.TrimStart('/');

        // Exact match or current path starts with item path (for nested routes)
        return currentPath.Equals(itemPath, StringComparison.OrdinalIgnoreCase) ||
               currentPath.StartsWith(itemPath + "/", StringComparison.OrdinalIgnoreCase);
    }

    private void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    private void ToggleSidebar()
    {
        _sidebarCollapsed = !_sidebarCollapsed;
        if (_sidebarCollapsed)
        {
            _expandedGroups.Clear(); // Collapse all groups when sidebar collapses
        }
        StateHasChanged();
    }

    private void ToggleNavGroup(string groupName)
    {
        if (_expandedGroups.Contains(groupName))
        {
            _expandedGroups.Remove(groupName);
        }
        else
        {
            _expandedGroups.Add(groupName);
        }
        StateHasChanged();
    }

    private void ToggleNotifications()
    {
        _showNotifications = !_showNotifications;
        StateHasChanged();
    }

    private void DismissAlerts()
    {
        _hasAlerts = false;
    }

    private bool IsActive(string? url)
    {
        if (string.IsNullOrEmpty(url)) return false;
        return _currentUrl?.Contains(url, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    private bool IsChildActive(NavigationItem parent)
    {
        if (parent.Children == null) return false;
        return parent.Children.Any(c => IsActive(c.Url));
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = e.Location;
        _showNotifications = false; // Close notifications on navigation
        StateHasChanged();
    }

    private async void OnNavigationChanged(object? sender, EventArgs e)
    {
        await LoadNavigationItems();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
        if (NavigationService != null)
        {
            NavigationService.NavigationChanged -= OnNavigationChanged;
        }
    }
}